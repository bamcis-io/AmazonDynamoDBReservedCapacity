{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Creates a Glue database and table for the DynamoDB price list data",

    "Parameters" : {
        "CURDatabase" : {
            "Type" : "String",
            "Description" : "The name of the database containing your CUR data. Leave blank to leave a placeholder in the query.",
            "Default" : ""

        },
        "CURTable" : {
            "Type" : "String",
            "Description" : "The name of the table that contains your CUR data you want to generate recommendations against. Leave blank to leave a placeholder in the query.",
            "Default" : ""
        }
    },

    "Conditions" : {
        "CURDatabaseEmpty" : {
            "Fn::Equals" : [
                {
                    "Ref" : "CURDatabase"
                },
                ""
            ]
        },
        "CURTableEmpty" : {
            "Fn::Equals" : [
                {
                    "Ref" : "CURTable"
                },
                ""
            ]
        }
    },

    "Resources" : {
        "S3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "BucketName" : "mhaken-pricelist-database"
            }
        },

        "GlueDatabase" : {
            "Type" : "AWS::Glue::Database",
            "Properties" : {
                "CatalogId" : {
                    "Ref" : "AWS::AccountId"
                },
                "DatabaseInput" : {
                    "Name" : "pricelist_database"
                }
            }
        },

        "GlueDynamoDBTableRaw" : {
            "Type" : "AWS::Glue::Table",
            "Properties" : {
                "CatalogId" : {
                    "Ref" : "AWS::AccountId"
                },
                "DatabaseName" : {
                    "Ref" : "GlueDatabase"
                },
                "TableInput" : {
                    "Name" : "dynamodb_raw",
                    "TableType" : "EXTERNAL_TABLE",
                    "Parameters" : {
                        "classification" : "csv",
                        "columnsOrdered" : "true",
                        "compressionType" : "none",
                        "delimiter" : ",",
                        "typeOfData" : "file"
                    },
                    "StorageDescriptor" : {
                        "InputFormat" : "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat" : "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "SerdeInfo" : {
                            "Name" : "OpenCSVSerDe",
                            "SerializationLibrary" : "org.apache.hadoop.hive.serde2.OpenCSVSerde",
                            "Parameters" : {
                                "skip.header.line.count" : "6",
                                "field.delim" : ","
                            }
                        },
                        "Parameters": {
                            "compressionType": "none", 
                            "classification": "csv", 
                            "typeOfData": "file", 
                            "columnsOrdered": "true", 
                            "delimiter": ","
                        }, 
                        "Location" : {
                            "Fn::Sub" : "s3://${S3Bucket}/dynamodb_raw"
                        },
                        "Columns": [
                            {
                                "Type": "string", 
                                "Name": "sku"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "offertermcode"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "ratecode"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "termtype"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "pricedescription"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "effectivedate"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "startingrange"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "endingrange"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "unit"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "priceperunit"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "currency"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "leasecontractlength"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "purchaseoption"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "offeringclass"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "product family"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "servicecode"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "location"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "location type"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "volume type"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "group"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "group description"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "usagetype"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "operation"
                            }, 
                            {
                                "Type": "string", 
                                "Name": "servicename"
                            }
                        ], 
                        "Compressed": false
                    }
                }
            }
        },

        "GlueDynamoDBTableFormatted" : {
            "Type" : "AWS::Glue::Table",
            "Properties" : {
                "CatalogId" : {
                    "Ref" : "AWS::AccountId"
                },
                "DatabaseName" : {
                    "Ref" : "GlueDatabase"
                },
                "TableInput" : {
                    "Name" : "dynamodb_formatted",
                    "TableType" : "EXTERNAL_TABLE",
                    "Parameters" : {
                        "classification" : "parquet",
                        "EXTERNAL" : "true",
                        "compressionType" : "gzip",
                        "has_encrypted_data" : "false"
                    },
                    "StorageDescriptor" : {
                        "InputFormat" : "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
                        "OutputFormat" : "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
                        "SerdeInfo" : {
                            "Name" : "ParquetHiveSerDe",
                            "SerializationLibrary" : "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
                        },
                        "Parameters": {
                            "compressionType": "gzip", 
                            "classification": "parquet"
                        }, 
                        "Location" : {
                            "Fn::Sub" : "s3://${S3Bucket}/dynamodb_formatted"
                        },
                        "Columns": [
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "sku"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "offertermcode"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "ratecode"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "platform"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "usagetype"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "varchar(14)", 
                                "Name": "region"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "service"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "adjustedpriceperunit"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "ondemandhourlycost"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "breakevenpercentage"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "upfrontfee"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "int", 
                                "Name": "leaseterm"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "purchaseoption"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "offeringclass"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "string", 
                                "Name": "key"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "reservedinstancecost"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "ondemandcostforterm"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "costsavings"
                            }, 
                            {
                                "Comment": "", 
                                "Type": "double", 
                                "Name": "percentsavings"
                            }
                        ], 
                        "Compressed": false
                    }
                }
            }
        },

        "AthenaQueryInsertIntoPriceList" : {
            "Type" : "AWS::Athena::NamedQuery",
            "Properties" : {
                "Database" : {
                    "Ref" : "GlueDatabase"
                },
                "Name" : "Insert-Into-DDB-Price-List-Formatted",
                "QueryString" : {
                    "Fn::Join" : [
                        "\n",
                        [
{
    "Fn::Sub" : "INSERT INTO \"${GlueDatabase}\".\"${GlueDynamoDBTableFormatted}\""
},
"WITH",
"  region_map",
"AS(",
"    SELECT",
"      MAP_AGG(abbr, regioncode) AS map",
"    FROM",
"        (",
"          VALUES",
"          ( '', 'us-east-1'),",
"          ( 'USE1', 'us-east-1'),",
"          ( 'USE2', 'us-east-2' ),",
"          ( 'USW1', 'us-west-1' ),",
"          ( 'USW2', 'us-west-2' ),",
"          ( 'UGW1', 'us-gov-west-1' ),",
"          ( 'UGE1', 'us-gov-east-1' ),",
"          ( 'CAN1', 'ca-central-1' ),",
"          ( 'AFS1', 'af-south-1' ),",
"          ( 'APN1', 'ap-northeast-1' ),",
"          ( 'APN2', 'ap-northeast-2' ),",
"          ( 'APN3', 'ap-northeast-3' ),",
"          ( 'APS1', 'ap-southeast-1' ),",
"          ( 'APS2', 'ap-southeast-2' ),",
"          ( 'APS4', 'ap-southeast-3' ),",
"          ( 'APS3', 'ap-south-1' ),",
"          ( 'APE1', 'ap-east-1' ),",
"          ( 'SAE1', 'sa-east-1' ),",
"          ( 'EU',   'eu-west-1' ),",
"          ( 'EUC1', 'eu-central-1' ),",
"          ( 'EUW2', 'eu-west-2' ),",
"          ( 'EUW3', 'eu-west-3' ),",
"          ( 'EUN1', 'eu-north-1' ),",
"          ( 'EUS1', 'eu-south-1' ),",
"          ( 'MES1', 'me-south-1' ),",
"          ( 'CNN1', 'cn-north-1' ),",
"          ( 'CNN2', 'cn-northwest-1')",
"        )",
"        AS t1(abbr, regioncode)",
"),",

"  reserved_capacity",
"AS(",
"  SELECT",
"      reserved.sku,",
"      MAX(reserved.offertermcode) AS offertermcode,",
"      MAX(reserved.ratecode) AS ratecode,",
"      MAX(reserved.\"group\") AS platform,",
"      CAST(MAX(DISTINCT ondemand.priceperunit) AS DOUBLE) AS ondemandhourlycost,",
"      MAX(reserved.offeringclass) AS offeringclass,",
"      reserved.usagetype,",
"      reserved.servicename,",
"      reserved.location AS region,",
"      CAST(substr(reserved.leasecontractlength, 1, 1) AS INTEGER) AS leasecontractlength,",
"      reserved.purchaseoption,",
"      CAST(array_max(map_values(map_filter(MAP_AGG(reserved.pricedescription, reserved.priceperunit), (key, value) -> key = 'Upfront Fee'))) AS DOUBLE) AS upfrontfee,",
"      CAST(array_max(map_values(map_filter(MAP_AGG(reserved.pricedescription, reserved.priceperunit), (key, value) -> key != 'Upfront Fee'))) AS DOUBLE) AS recurring",
"  FROM",
{
    "Fn::Sub" : "\"${GlueDatabase}\".\"${GlueDynamoDBTableRaw}\" AS reserved"
},
"  INNER JOIN",
{
    "Fn::Sub" : "\"${GlueDatabase}\".\"${GlueDynamoDBTableRaw}\" AS ondemand"
},
"  ON", 
"      reserved.sku = ondemand.sku",
"        AND",
"      ondemand.termtype = 'OnDemand'",
"        AND",
"      reserved.termtype = 'Reserved'",
"        AND",
"      NOT regexp_like(ondemand.pricedescription, '\\(free tier\\)')",
"        AND",
"      ondemand.endingrange = 'Inf'",
"  GROUP BY",
"    reserved.sku,",
"    reserved.usagetype,",
"    reserved.leasecontractlength,",
"    reserved.purchaseoption,",
"    reserved.location,",
"    reserved.servicename",
"),",

"    interim",
"AS(",

"SELECT",
"    sku,", 
"    offertermcode,",
"    ratecode,",
"    platform,",
"    usagetype,",
"    region_map.map[COALESCE( regexp_extract(usagetype, '^([a-zA-Z]{2,3}[0-9]*)(-.*)$', 1), '')] AS region,",
"    servicename AS service,",
"    recurring AS adjustedpriceperunit,",
"    ondemandhourlycost,",
"    upfrontfee,",
"    leasecontractlength as leaseterm,",
"    purchaseoption,",
"    offeringclass,",
"    concat(CAST(leasecontractlength AS varchar), '::', replace(upper(purchaseoption), ' ', ''), '::', upper(offeringclass)) AS key,",
"    ((leasecontractlength * 365 * 24 * recurring) + upfrontfee) AS reservedinstancecost,",
"    (leasecontractlength * 365 * 24 * ondemandhourlycost) AS ondemandcostforterm,",
"    ((upfrontfee + (365 * leasecontractlength * 24 * recurring)) / (365 * leasecontractlength * 24 * ondemandhourlycost)) AS breakevenpercentage",
"FROM",
"    reserved_capacity,",
"    region_map",
")",

"SELECT",
"    sku,", 
"    offertermcode,",
"    ratecode,",
"    platform,", 
"    usagetype,",
"    region,",
"    service,",
"    adjustedpriceperunit,",
"    ondemandhourlycost,",
"    breakevenpercentage,",
"    upfrontfee,",
"    leaseterm,",
"    purchaseoption,",
"    offeringclass,",
"    key,",
"    reservedinstancecost,",
"    ondemandcostforterm,",
"    (ondemandcostforterm - reservedinstancecost) AS costsavings,",
"    ((ondemandcostforterm - reservedinstancecost) / ondemandcostforterm) * 100 AS percentsavings",
"FROM interim"
                        ]
                    ]
                }
            }
        },

        "AthenaQueryGetDDBRecommendations" : {
            "Type" : "AWS::Athena::NamedQuery",
            "Properties" : {
                "Database" : {
                    "Fn::If" : [
                        "CURDatabaseEmpty",
                        {
                            "Ref" : "GlueDatabase"
                        },
                        {
                            "Ref" : "CURDatabase"
                        }
                    ]
                },
                "Name" : "Get-DDB-Reserved-Capacity-Recommendations",
                "QueryString" : {
                    "Fn::Join" : [
                        "\n",
                        [
"WITH",
"/*",
"    ================================================== VARIABLES ==================================================",
    
"    Set up the pseudo-variables we will use with the query, the",
"    start, end, and block size of capacity you have to buy for DDB",
"*/",
"    variables",
"AS",
"(",
"    SELECT",
"        CAST(start_date as DATE) AS start_date,",
"        CAST(end_date as DATE) AS end_date,",
"        accountid,",
"        reserved_capacity_block_size",
"    FROM",
"        (",
"          VALUES",
{
    "Fn::Sub": "          ('2020-01-01', '2020-01-31', '${AWS::AccountId}', 100)"
},
"        )",
"        AS t1(start_date, end_date, accountid, reserved_capacity_block_size)",
"),",

"    usage_by_region",
"AS",
"(",
"    SELECT",
"        product_region AS region,",
"        product_usagetype AS usage_type,",
"        SUM(line_item_usage_amount) AS total_usage, -- The total usage in the region",
"        MAX(line_item_usage_start_date) AS latest, -- The most recent usage time",
"        MIN(start_date) AS start_date, -- The start date for the report, inclusive",
"        MAX(end_date) AS end_date, -- The end date for the report, non-inclusive",
"        MAX(product_sku) AS sku, -- The unique sku for the charge",
"        ARRAY_AGG(DISTINCT line_item_resource_id) as \"tables\", -- The tables that contributed to the usage, i.e. unique resources",
"        MAP_AGG(line_item_usage_start_date, line_item_usage_amount) AS usage_per_hour, -- create a map that has the start date as the key and the usage for that hour as the value",
"        MAX(var.reserved_capacity_block_size) as reserved_capacity_block_size",
"    FROM",
{
    "Fn::Sub" : [
        "        \"${Database}\".\"${Table}\", variables AS var",
        {
            "Database" : {
                "Fn::If" : [
                    "CURDatabaseEmpty",
                    "curdatabase",
                    {
                        "Ref" : "CURDatabase"
                    }
                ]
            },
            "Table" : {
                "Fn::If" : [
                    "CURTableEmpty",
                    "curtable",
                    {
                        "Ref" : "CURTable"
                    }
                ]
            }
        }
    
    ]
},

"    WHERE",
"        pricing_term = 'OnDemand'",
"        AND",
"            (product_servicecode = 'AmazonDynamoDB'",
"                AND", 
"             regexp_like(product_usagetype,'\\bWriteCapacityUnit-Hrs|\\bReadCapacityUnit-Hrs')",
"            ) -- DynamoDB read/write capacity units",
"        AND",
"            line_item_usage_start_date >= var.start_date",
"        AND",
"            line_item_usage_start_date < var.end_date",
"        AND",
"            line_item_usage_account_id = var.accountid",
"     GROUP BY",
"         product_region, product_usagetype",
"),",

"    agg_usage -- only need to do this statement because the previous uses group by and we need to map_concat the initial state and the actual hourly usage",
"AS", 
"(",
"    SELECT",
"        region,",
"        usage_type,",
"        total_usage, -- The total usage in the region",
"        latest, -- The most recent usage time",
"        start_date, -- The start date for the report, inclusive",
"        end_date, -- The end date for the report, non-inclusive",
"        sku, -- The unique sku for the charge",
"        \"tables\", -- The tables that contributed to the usage",
"        usage_per_hour,",
"        map_concat( -- have to do map_concat in this query because the above query uses GROUP BY and this isn't an aggregate function",
"          MAP(           -- Create a Map of all of the hours in the period with an initial zero as the usage amount",
"              SEQUENCE(start_date, end_date, INTERVAL '1' HOUR), -- Creates the keys, which are the hours in the evaluation period",
"              transform(",
"                  SEQUENCE(start_date, end_date, INTERVAL '1' HOUR),",
"                  x -> 0",
"              ) -- Creates the values, the same number of 0's as hours",
"          ),",
"          usage_per_hour -- concat the map of hours and zero values with the actual usage per hour, this will update any common keys with the actual usage",
"        ) AS usage_per_hour_for_timespan,",
"        reserved_capacity_block_size -- carry this over to use in the last query to determine blocks of 100 to buy",
"    FROM",
"        usage_by_region",
")",

"SELECT",
"    ddb.service as Service,",
"    ddb.platform as Platform,",
"    ddb.region as Location,",
"    ddb.ondemandhourlycost * reserved_capacity_block_size AS OnDemand,",
"    ddb.upfrontfee * reserved_capacity_block_size as UpfrontFee,",
"    ddb.leaseterm as LeaseTerm,",
"    ddb.purchaseoption as PurchaseOption,",
"    ddb.offeringclass as OfferingClass,",
"    ddb.adjustedpriceperunit * reserved_capacity_block_size as AdjustedPricePerUnit,",
"    ddb.reservedinstancecost * reserved_capacity_block_size as AmortizedRICost,",
"    ddb.ondemandcostforterm * reserved_capacity_block_size as OnDemandCostForTerm,",
"    ddb.costsavings * reserved_capacity_block_size as TotalCostSavingsForTerm,",
"    ddb.percentsavings as PercentSavings,",
"    ddb.breakevenpercentage as BreakevenPercentage,",
"    agg_usage.total_usage as TotalUsage,",
"    floor(",
"        COALESCE(",
"            reduce(",
"                map_values(agg_usage.usage_per_hour_for_timespan), -- Take the values of usage per hour, input data",
"                CAST(",
"                    ROW(",
"                        MAP(        -- Create a map of the total usages per hour, and the number of times they occur in the period, defaulting to 0",
"                            array_distinct(",
"                                map_values(agg_usage.usage_per_hour_for_timespan)",
"                            ),",
"                            transform(",
"                                array_distinct(",
"                                    map_values(agg_usage.usage_per_hour_for_timespan)",
"                                ),",
"                                x -> 0",
"                            )",
"                        )",
"                    ) AS ROW(map MAP(INTEGER, INTEGER))",
"                ),                                     -- this defines the initial state, so { 5: 0, 6: 0, 1: 0, 20: 0} the capacity used distinct values and 0 occurences",
"                (initial_state, hourly_usage) -> CAST( -- given the initial state and array of hourly usages, evaluate each hourly usage value",
"                    ROW(",
"                        transform_values(initial_state.map, (key, value) ->",
"                            IF (hourly_usage <= key, value + 1, value)    -- Update all values if this usage quantity is less than or equal",
"                                                                        -- So if 6 were running, we also count that towards 5, 4, 3, 2, 1",
"                        )",
"                    ) AS ROW (map MAP(INTEGER, INTEGER))",
"                ),", 
"                updated_state -> array_max(",
"                    map_keys(",
"                        map_filter(            -- Only take usage quantities that are greater than the breakeven",
"                            updated_state.map,",
"                            (key, total_capacity_used) -> total_capacity_used >= breakevenpercentage * cardinality(usage_per_hour_for_timespan) -- cardinality(usage_per_hour_for_timespan) represents the number of hours in our evaluation timespan",
"                        )",
"                    )",
"                )",
"            ),",
"            0",
"        ) / reserved_capacity_block_size",
"    ) AS ReservedCapacityUnitsOf100,",
"    (agg_usage.total_usage / cardinality(usage_per_hour_for_timespan)) AS AverageUsagePerHour,",
"    agg_usage.tables as ResourceIds,",
"    agg_usage.usage_per_hour_for_timespan as UsagePerHour",
    
"FROM",
"  agg_usage",
"LEFT OUTER JOIN",
{
    "Fn::Sub" : "   \"${GlueDatabase}\".\"${GlueDynamoDBTableFormatted}\" AS ddb"
},
"ON",
"  agg_usage.sku = ddb.sku"
                        ]
                    ]
                }
            }
        }
    },

    "Outputs" : {
    }
}

